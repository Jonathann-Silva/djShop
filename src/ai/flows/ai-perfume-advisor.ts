// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI-powered perfume advisor flow that recommends perfumes based on user preferences.
 *
 * - aiPerfumeAdvisor - A function that takes user preferences and returns perfume recommendations.
 * - AIPerfumeAdvisorInput - The input type for the aiPerfumeAdvisor function.
 * - AIPerfumeAdvisorOutput - The return type for the aiPerfumeAdvisor function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AIPerfumeAdvisorInputSchema = z.object({
  genderPreference: z
    .string()
    .describe('The preferred gender for the perfume (e.g., masculine, feminine, unisex).'),
  scentProfile: z
    .string()
    .describe(
      'The desired scent profile (e.g., floral, woody, oriental, fresh).'
    ),
  occasion: z
    .string()
    .describe('The occasion for wearing the perfume (e.g., casual, formal, romantic).'),
  budget: z
    .string()
    .describe('The budget for the perfume (e.g., low, medium, high).'),
  additionalNotes: z
    .string()
    .optional()
    .describe('Any additional preferences or notes from the user.'),
});

export type AIPerfumeAdvisorInput = z.infer<typeof AIPerfumeAdvisorInputSchema>;

const AIPerfumeAdvisorOutputSchema = z.object({
  recommendations: z.array(
    z.object({
      name: z.string().describe('The name of the perfume.'),
      brand: z.string().describe('The brand of the perfume.'),
      description: z.string().describe('A brief description of the perfume.'),
      notes: z.string().describe('Key scent notes of the perfume.'),
      price: z.string().describe('The price range of the perfume.'),
    })
  ).describe('A list of perfume recommendations based on user preferences.'),
});

export type AIPerfumeAdvisorOutput = z.infer<typeof AIPerfumeAdvisorOutputSchema>;

export async function aiPerfumeAdvisor(
  input: AIPerfumeAdvisorInput
): Promise<AIPerfumeAdvisorOutput> {
  return aiPerfumeAdvisorFlow(input);
}

const prompt = ai.definePrompt({
  name: 'aiPerfumeAdvisorPrompt',
  input: {schema: AIPerfumeAdvisorInputSchema},
  output: {schema: AIPerfumeAdvisorOutputSchema},
  prompt: `You are a perfume expert. Recommend perfumes based on the following preferences:

Gender Preference: {{{genderPreference}}}
Scent Profile: {{{scentProfile}}}
Occasion: {{{occasion}}}
Budget: {{{budget}}}
Additional Notes: {{{additionalNotes}}}

Format your response as a JSON object with a "recommendations" field, which is an array of perfume objects. Each perfume object should include the name, brand, description, notes, and price.
`,
});

const aiPerfumeAdvisorFlow = ai.defineFlow(
  {
    name: 'aiPerfumeAdvisorFlow',
    inputSchema: AIPerfumeAdvisorInputSchema,
    outputSchema: AIPerfumeAdvisorOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
